# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

function parse_git_branch {
    ref=$(git symbolic-ref HEAD 2> /dev/null)
    if [[ -n $ref ]]; then
        echo " ("${ref#refs/heads/}") "
    else
        if [ "" != "$(git rev-parse -q --git-dir 2> /dev/null)" ]; then
            echo " (detached) "
        fi
    fi
}
function parse_git_suffix {
    suffix=$(git rev-parse --show-prefix 2> /dev/null) || return
#    suffix="${suffix:0:$((${#suffix} - 1))}"
    [[ -n $suffix ]] && echo "${suffix:0:$((${#suffix} - 1))} "
}

function parse_git_cwd {
    PWD=$(realpath --strip "$(pwd)/$(git rev-parse --show-cdup 2> /dev/null)")
    GIT_PWD=${PWD/#$HOME/\~}
    echo $GIT_PWD
}

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        BASE03=$(tput setaf 234)
        BASE02=$(tput setaf 235)
        BASE01=$(tput setaf 240)
        BASE00=$(tput setaf 241)
        BASE0=$(tput setaf 244)
        BASE1=$(tput setaf 245)
        BASE2=$(tput setaf 254)
        BASE3=$(tput setaf 230)
        YELLOW=$(tput setaf 136)
        ORANGE=$(tput setaf 166)
        RED=$(tput setaf 160)
        MAGENTA=$(tput setaf 125)
        VIOLET=$(tput setaf 61)
        BLUE=$(tput setaf 33)
        CYAN=$(tput setaf 37)
        GREEN=$(tput setaf 64)
    else
        BASE03=$(tput setaf 8)
        BASE02=$(tput setaf 0)
        BASE01=$(tput setaf 10)
        BASE00=$(tput setaf 11)
        BASE0=$(tput setaf 12)
        BASE1=$(tput setaf 14)
        BASE2=$(tput setaf 7)
        BASE3=$(tput setaf 15)
        YELLOW=$(tput setaf 3)
        ORANGE=$(tput setaf 9)
        RED=$(tput setaf 1)
        MAGENTA=$(tput setaf 5)
        VIOLET=$(tput setaf 13)
        BLUE=$(tput setaf 4)
        CYAN=$(tput setaf 6)
        GREEN=$(tput setaf 2)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
    COLOR_YELLOW="\[$YELLOW\]"
    COLOR_RED="\[$MAGENTA\]"
    COLOR_GREEN="\[$GREEN\]"
    COLOR_BLUE_BOLD="\[$BLUE\]"
    COLOR_WHITE="\[$BASE2\]"
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
    COLOR_RED="\[\033[0;31m\]"
    COLOR_YELLOW="\[\033[0;33m\]"
    COLOR_GREEN="\[\033[0;32m\]"
    COLOR_BLUE_BOLD="\[\033[01;34m\]"
    COLOR_WHITE="\[\033[00m\]"
fi

CWD_PREFIX="\$(parse_git_cwd)"
CWD_MID="\$(parse_git_branch)"
CWD_SUFFIX="\$(parse_git_suffix)\$ "

if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]$CWD_MID\[\033[00m\]'
    PS1="\${debian_chroot:+(\$debian_chroot)}$BOLD$COLOR_GREEN\u@\h$COLOR_WHITE:$COLOR_BLUE_BOLD$CWD_PREFIX$COLOR_GREEN$CWD_MID$COLOR_BLUE_BOLD$CWD_SUFFIX$RESET$COLOR_WHITE"
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:$CWD_PREFIX$CWD_MID$CWD_SUFFIX'
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#    . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

EDITOR=vim

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

export PHPRC=/etc/php5/cli

export PATH=$HOME/bin:$HOME/git/bin:$PATH
export LD_LIBRARY_PATH=$HOME/git/lib:$LD_LIBRARY_PATH

source /usr/share/autojump/autojump.bash

stty -ixon -ixoff

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# added by travis gem
[ -f /home/naderman/.travis/travis.sh ] && source /home/naderman/.travis/travis.sh

export PATH="/home/naderman/projects/hhvm/hack/bin:$PATH"


# Automatically added by Platform.sh CLI installer
export PATH="/home/naderman/.platformsh/bin:$PATH"
. '/home/naderman/.platformsh/shell-config.rc' 2>/dev/null
